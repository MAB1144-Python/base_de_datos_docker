# TALLER PRÁCTICO: CONSULTAS SQL CON PYTHON Y DOCKER
# ================================================================
# Sistema de Base de Datos - Curso de Programación
# Duración estimada: 3-4 horas académicas
# ================================================================

## INFORMACIÓN GENERAL
- Nombre del Taller: Consultas SQL Interactivas
- Objetivo: Aprender SQL mediante un sistema web interactivo
- Herramienta: Sistema de Consultas SQL con Python, Flask y Docker
- Prerrequisitos: Conceptos básicos de bases de datos

## COMPETENCIAS A DESARROLLAR
1. Ejecutar consultas SQL básicas (SELECT, INSERT, UPDATE, DELETE)
2. Utilizar funciones de agregación y agrupación
3. Implementar consultas con múltiples tablas (JOINs)
4. Analizar y interpretar resultados de consultas
5. Resolver problemas usando bases de datos relacionales

## PREPARACIÓN INICIAL (15 minutos)

### Paso 1: Verificar el Sistema
1. Abrir el navegador web
2. Navegar a: http://localhost:5000
3. Verificar que se carga la interfaz del sistema
4. Explorar las secciones:
   - Esquema de Base de Datos (lado izquierdo)
   - Consultas de Ejemplo (lado derecho)
   - Área de consulta SQL (centro)

### Paso 2: Familiarizarse con la Base de Datos
Revisar el esquema de la base de datos que aparece en pantalla:

TABLA: usuarios
- id (INTEGER, PRIMARY KEY) - Identificador único del usuario
- nombre (TEXT) - Nombre completo del usuario
- email (TEXT, UNIQUE) - Correo electrónico único
- edad (INTEGER) - Edad en años
- fecha_registro (DATE) - Fecha de registro en el sistema

TABLA: productos
- id (INTEGER, PRIMARY KEY) - Identificador único del producto
- nombre (TEXT) - Nombre del producto
- precio (REAL) - Precio en unidades monetarias
- categoria (TEXT) - Categoría del producto
- stock (INTEGER) - Cantidad disponible en inventario

TABLA: ventas
- id (INTEGER, PRIMARY KEY) - Identificador único de la venta
- usuario_id (INTEGER, FOREIGN KEY) - Referencia al usuario
- producto_id (INTEGER, FOREIGN KEY) - Referencia al producto
- cantidad (INTEGER) - Cantidad vendida
- fecha_venta (DATETIME) - Fecha y hora de la venta

### Paso 3: Probar una Consulta Básica
En el área de consulta, escribir y ejecutar:

SELECT * FROM usuarios;

Observar el resultado y familiarizarse con la interfaz.

## PARTE 1: CONSULTAS BÁSICAS DE SELECCIÓN (30 minutos)

### Ejercicio 1.1: Selección Simple
Objetivo: Dominar la sintaxis básica de SELECT

INSTRUCCIONES:
Ejecutar cada consulta y anotar cuántos registros devuelve cada una:

a) Mostrar todos los productos:
SELECT * FROM productos;
Registros devueltos: ____

b) Mostrar solo nombres y emails de usuarios:
SELECT nombre, email FROM usuarios;
Registros devueltos: ____

c) Mostrar productos de la categoría "Electrónicos":
SELECT * FROM productos WHERE categoria = 'Electrónicos';
Registros devueltos: ____

d) Mostrar usuarios mayores de 25 años:
SELECT nombre, edad FROM usuarios WHERE edad > 25;
Registros devueltos: ____

### Ejercicio 1.2: Filtros y Operadores
Objetivo: Usar operadores de comparación y lógicos

INSTRUCCIONES:
Completar las siguientes consultas:

a) Productos con precio entre 50 y 200:
SELECT nombre, precio FROM productos WHERE precio >= 50 AND precio <= 200;

b) Usuarios cuyo nombre contiene "Carlos" o "Ana":
SELECT * FROM usuarios WHERE nombre LIKE '%Carlos%' OR nombre LIKE '%Ana%';

c) Productos que NO son de la categoría "Muebles":
SELECT nombre, categoria FROM productos WHERE categoria != 'Muebles';

PREGUNTA DE REFLEXIÓN:
¿Cuál es la diferencia entre usar LIKE y el operador = en las consultas?
Respuesta: _________________________________________________

### Ejercicio 1.3: Ordenamiento
Objetivo: Ordenar resultados usando ORDER BY

INSTRUCCIONES:
a) Usuarios ordenados por edad (menor a mayor):
SELECT nombre, edad FROM usuarios ORDER BY edad;

b) Productos ordenados por precio (mayor a menor):
SELECT nombre, precio FROM productos ORDER BY precio DESC;

c) Usuarios ordenados por nombre alfabéticamente:
SELECT * FROM usuarios ORDER BY nombre;

DESAFÍO:
Escribir una consulta que muestre los productos ordenados primero por categoría y luego por precio:
_________________________________________________

## PARTE 2: FUNCIONES DE AGREGACIÓN (30 minutos)

### Ejercicio 2.1: Funciones Básicas
Objetivo: Usar COUNT, SUM, AVG, MIN, MAX

INSTRUCCIONES:
Ejecutar y completar los resultados:

a) Contar total de usuarios:
SELECT COUNT(*) as total_usuarios FROM usuarios;
Resultado: ____

b) Precio promedio de productos:
SELECT AVG(precio) as precio_promedio FROM productos;
Resultado: ____

c) Producto más caro:
SELECT MAX(precio) as precio_maximo FROM productos;
Resultado: ____

d) Edad mínima de usuarios:
SELECT MIN(edad) as edad_minima FROM usuarios;
Resultado: ____

e) Total de stock de todos los productos:
SELECT SUM(stock) as stock_total FROM productos;
Resultado: ____

### Ejercicio 2.2: Agrupación con GROUP BY
Objetivo: Agrupar datos y aplicar funciones de agregación

INSTRUCCIONES:
a) Contar productos por categoría:
SELECT categoria, COUNT(*) as cantidad FROM productos GROUP BY categoria;

b) Precio promedio por categoría:
SELECT categoria, AVG(precio) as precio_promedio FROM productos GROUP BY categoria;

c) Contar usuarios por edad:
SELECT edad, COUNT(*) as cantidad FROM usuarios GROUP BY edad ORDER BY edad;

DESAFÍO AVANZADO:
Escribir una consulta que muestre las categorías que tienen más de 1 producto:
_________________________________________________

## PARTE 3: CONSULTAS CON MÚLTIPLES TABLAS (45 minutos)

### Ejercicio 3.1: INNER JOIN Básico
Objetivo: Combinar datos de múltiples tablas

CONSULTA BASE:
SELECT 
    u.nombre as usuario,
    p.nombre as producto,
    v.cantidad,
    v.fecha_venta
FROM ventas v
INNER JOIN usuarios u ON v.usuario_id = u.id
INNER JOIN productos p ON v.producto_id = p.id;

ANÁLISIS:
a) ¿Cuántas ventas se muestran? ____
b) ¿Qué usuario ha comprado más veces? ____
c) ¿Cuál es el producto más vendido? ____

### Ejercicio 3.2: Consultas Complejas con JOIN
Objetivo: Crear consultas más elaboradas

INSTRUCCIONES:
Completar las siguientes consultas:

a) Mostrar ventas con información completa del cliente:
SELECT 
    u.nombre as cliente,
    u.email,
    u.edad,
    p.nombre as producto,
    p.precio,
    v.cantidad,
    (p.precio * v.cantidad) as total_venta
FROM ventas v
JOIN usuarios u ON v.usuario_id = u.id
JOIN productos p ON v.producto_id = p.id;

b) Usuarios que han comprado productos de "Electrónicos":
SELECT DISTINCT u.nombre, u.email
FROM usuarios u
JOIN ventas v ON u.id = v.usuario_id
JOIN productos p ON v.producto_id = p.id
WHERE p.categoria = 'Electrónicos';

### Ejercicio 3.3: Consultas de Análisis
Objetivo: Obtener insights de negocio

INSTRUCCIONES:
a) Total de ventas por usuario:
SELECT 
    u.nombre,
    COUNT(v.id) as numero_compras,
    SUM(p.precio * v.cantidad) as total_gastado
FROM usuarios u
LEFT JOIN ventas v ON u.id = v.usuario_id
LEFT JOIN productos p ON v.producto_id = p.id
GROUP BY u.id, u.nombre
ORDER BY total_gastado DESC;

b) Productos más vendidos:
SELECT 
    p.nombre,
    p.categoria,
    SUM(v.cantidad) as total_vendido
FROM productos p
LEFT JOIN ventas v ON p.id = v.producto_id
GROUP BY p.id, p.nombre
ORDER BY total_vendido DESC;

PREGUNTA DE ANÁLISIS:
Basándose en los resultados, ¿qué recomendaciones darías al negocio?
_________________________________________________

## PARTE 4: MODIFICACIÓN DE DATOS (30 minutos)

### Ejercicio 4.1: INSERT - Agregar Datos
Objetivo: Insertar nuevos registros

INSTRUCCIONES:
⚠️ IMPORTANTE: Anota los IDs que se generan para usar en ejercicios posteriores

a) Agregar un nuevo usuario:
INSERT INTO usuarios (nombre, email, edad) 
VALUES ('Tu Nombre Aquí', 'tu.email@universidad.edu', 20);

b) Agregar un nuevo producto:
INSERT INTO productos (nombre, precio, categoria, stock) 
VALUES ('Smartphone', 599.99, 'Electrónicos', 25);

c) Verificar que se agregaron correctamente:
SELECT * FROM usuarios ORDER BY id DESC LIMIT 1;
SELECT * FROM productos ORDER BY id DESC LIMIT 1;

REGISTRA LOS IDs GENERADOS:
ID del nuevo usuario: ____
ID del nuevo producto: ____

### Ejercicio 4.2: UPDATE - Actualizar Datos
Objetivo: Modificar registros existentes

INSTRUCCIONES:
a) Actualizar el precio de un producto:
UPDATE productos SET precio = 799.99 WHERE nombre = 'Laptop';

b) Actualizar la edad del usuario que acabas de crear:
UPDATE usuarios SET edad = 21 WHERE email = 'tu.email@universidad.edu';

c) Verificar los cambios:
SELECT nombre, precio FROM productos WHERE nombre = 'Laptop';
SELECT nombre, edad FROM usuarios WHERE email = 'tu.email@universidad.edu';

### Ejercicio 4.3: Operaciones con Ventas
Objetivo: Simular transacciones de venta

a) Crear una venta usando los IDs que registraste:
INSERT INTO ventas (usuario_id, producto_id, cantidad) 
VALUES ([ID_USUARIO], [ID_PRODUCTO], 2);

Reemplaza [ID_USUARIO] e [ID_PRODUCTO] con los valores que anotaste.

b) Verificar la venta:
SELECT 
    u.nombre as cliente,
    p.nombre as producto,
    v.cantidad,
    v.fecha_venta
FROM ventas v
JOIN usuarios u ON v.usuario_id = u.id
JOIN productos p ON v.producto_id = p.id
WHERE u.email = 'tu.email@universidad.edu';

## PARTE 5: DESAFÍOS AVANZADOS (45 minutos)

### Desafío 5.1: Análisis de Inventario
Crear una consulta que muestre:
- Nombre del producto
- Stock actual
- Cantidad total vendida
- Stock recomendado (stock + vendidos)

TU CONSULTA:
_________________________________________________

### Desafío 5.2: Reporte de Clientes
Crear un reporte que muestre:
- Nombre del cliente
- Número total de compras
- Producto favorito (más comprado)
- Total gastado

TU CONSULTA:
_________________________________________________

### Desafío 5.3: Análisis Temporal
Crear una consulta que muestre las ventas por mes:
- Mes de la venta
- Número de ventas
- Total de productos vendidos
- Ingresos totales

PISTA: Usa strftime('%Y-%m', fecha_venta) para extraer año-mes

TU CONSULTA:
_________________________________________________

## PARTE 6: PROYECTO FINAL (30 minutos)

### Escenario: Expansión del Negocio
La empresa quiere expandirse y necesita un análisis completo.

### Tareas del Proyecto:

1. **Crear nuevos datos de prueba:**
   - Agrega 2 nuevos usuarios
   - Agrega 3 nuevos productos de diferentes categorías
   - Crea 5 nuevas ventas

2. **Generar reportes:**
   - Top 3 productos más rentables
   - Top 3 clientes que más gastan
   - Categorías con mejor performance

3. **Análisis de tendencias:**
   - ¿Qué edad de clientes compra más?
   - ¿Qué categoría tiene mejor margen?
   - ¿Qué productos necesitan más stock?

### Entrega del Proyecto:
Documenta todas tus consultas y resultados:

CONSULTA 1 (Nuevos datos):
_________________________________________________

CONSULTA 2 (Top productos):
_________________________________________________

CONSULTA 3 (Top clientes):
_________________________________________________

CONSULTA 4 (Análisis categorías):
_________________________________________________

CONCLUSIONES DEL ANÁLISIS:
_________________________________________________

## EVALUACIÓN Y REFLEXIÓN (15 minutos)

### Autoevaluación:
Marca con una X tu nivel de dominio:

□ Básico: Puedo hacer consultas SELECT simples
□ Intermedio: Manejo JOINs y funciones de agregación
□ Avanzado: Puedo resolver problemas complejos con SQL

### Preguntas de Reflexión:

1. ¿Cuál fue la consulta más difícil de crear? ¿Por qué?
_________________________________________________

2. ¿Qué ventajas ves en usar una interfaz web para practicar SQL?
_________________________________________________

3. ¿Cómo aplicarías estas habilidades en un proyecto real?
_________________________________________________

4. ¿Qué funcionalidad adicional le agregarías al sistema?
_________________________________________________

## RECURSOS ADICIONALES

### Comandos SQL Útiles:
- DISTINCT: Elimina duplicados
- LIMIT: Limita número de resultados
- BETWEEN: Rango de valores
- IN: Lista de valores posibles
- IS NULL / IS NOT NULL: Valores nulos

### Funciones de Fecha:
- CURRENT_DATE: Fecha actual
- CURRENT_TIMESTAMP: Fecha y hora actual
- DATE(): Extrae fecha de datetime
- strftime(): Formateo de fechas

### Consejos para Consultas Complejas:
1. Empieza simple y ve agregando complejidad
2. Usa alias para claridad
3. Comenta tus consultas complejas
4. Siempre verifica tus resultados

## PRÓXIMOS PASOS

### Para Continuar Aprendiendo:
1. Practica con datasets más grandes
2. Aprende sobre índices y optimización
3. Estudia diferentes tipos de JOIN (LEFT, RIGHT, FULL)
4. Explora subconsultas (subqueries)
5. Investiga sobre procedures y triggers

### Proyectos Sugeridos:
- Sistema de biblioteca
- Gestión de inventario personal
- Análisis de logs web
- Dashboard de ventas

¡FELICITACIONES! Has completado el taller de consultas SQL.
Este conocimiento te servirá como base para el desarrollo de aplicaciones con bases de datos.

===================================================================
NOTAS DEL INSTRUCTOR:
- Tiempo estimado: 3-4 horas académicas
- Se recomienda hacer pausas cada 45 minutos
- Los estudiantes pueden trabajar en parejas
- Guardar las consultas importantes para referencia futura
===================================================================